/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            flavor = "tap-preferred";
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "tap-preferred";
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        equal {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp GRAVE       &kp Q  &kp W            &kp E                &kp R              &kp T        &kp Y          &kp U               &kp I                 &kp O             &kp P          &kp LEFT_BRACKET
&mo 1           &kp A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G        &kp H          &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_ALT L  &kp SEMICOLON  &kp SQT
&kp LEFT_SHIFT  &kp Z  &kp X            &kp C                &kp V              &kp B        &kp N          &kp M               &kp COMMA             &kp DOT           &kp FSLH       &kp RIGHT_SHIFT
                                        &kp LEFT_GUI         &mo 2              &kp SPACE    &kp BACKSPACE  &kp RIGHT_CONTROL   &kp ENTER
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans          &kp BACKSPACE  &kp UP_ARROW  &kp DELETE  &trans    &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans     &kp BACKSLASH
&trans  &kp LEFT_SHIFT  &kp LEFT       &kp DOWN      &kp RIGHT   &trans    &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans     &trans
&trans  &trans          &trans         &trans        &trans      &trans    &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH  &trans
                                       &trans        &trans      &trans    &trans  &kp NUMBER_0  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB  &kp LEFT_ALT  &kp LS(NUMBER_9)  &kp LS(NUMBER_0)  &trans              &kp F10    &trans  &kp F7  &kp F8  &kp F9  &trans             &trans
&trans   &trans        &kp MINUS         &kp EQUAL         &kp LA(LEFT_SHIFT)  &kp F11    &trans  &kp F4  &kp F5  &kp F6  &trans             &trans
&trans   &trans        &shift MINUS      &shift EQUAL      &trans              &kp F12    &trans  &kp F1  &kp F2  &kp F3  &kp RIGHT_BRACKET  &trans
                                         &trans            &trans              &trans     &trans  &trans  &trans
            >;
        };

        both {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans           &trans  &trans  &rgb_ug RGB_COLOR_HSB(125,44,57)  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG
&trans  &trans  &trans  &trans  &trans  &trans    &rgb_ug RGB_EFF  &trans  &trans  &trans                            &rgb_ug RGB_BRD  &rgb_ug RGB_ON
&trans  &trans  &trans  &trans  &trans  &trans    &rgb_ug RGB_EFR  &trans  &trans  &trans                            &trans           &rgb_ug RGB_OFF
                        &trans  &trans  &trans    &trans           &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
